// problem url: https://leetcode.com/problems/longest-common-subsequence/
// mode: Medium
// Longest Common Subsequence

class Solution {
    int longestCommonSubsequence(int index1, string &text1, int index2, string &text2, vector<vector<int>> &dp){
        if(index1<0 || index2<0)
            return 0;
        if(dp[index1][index2]!=-1)  return dp[index1][index2];
        
        return dp[index1][index2] = text1[index1]==text2[index2] 
                                        ?   1 + longestCommonSubsequence(index1-1, text1, index2-1, text2, dp)
            
                                        :   max(longestCommonSubsequence(index1, text1, index2-1, text2, dp), 
                                                longestCommonSubsequence(index1-1, text1, index2, text2, dp)); 
    }
public:
    int longestCommonSubsequence(string text1, string text2) {
        int text1Size = text1.size();
        int text2Size = text2.size();
        vector<vector<int>> dp(text1Size, vector<int>(text2Size, -1));
        return longestCommonSubsequence(text1Size-1, text1, text2Size-1, text2, dp);
    }
};
