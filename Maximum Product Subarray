// problem url: https://leetcode.com/problems/maximum-product-subarray/
// mode: Medium
// Maximum Product Subarray

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int size = nums.size();
        int maxProductFromLeft = nums[0];
        int maxProductFromRight = nums[size-1];
        bool zeroPresent = false;
        
        int tempProduct = 1;
        for(int num: nums){
            if(num == 0){
                tempProduct = 1;
                zeroPresent = true;
            }else{
                tempProduct *= num;
                maxProductFromLeft = max(maxProductFromLeft, tempProduct);
            }
        }
        
        tempProduct = 1;
        for(int i=size-1; i>=0; i--){
            if(nums[i]==0){
                tempProduct = 1;
            }else{
                tempProduct *= nums[i];
                maxProductFromRight = max(maxProductFromRight, tempProduct);
            }
        }
        
        int ans = max(maxProductFromLeft, maxProductFromRight);
        return zeroPresent ? max(ans, 0) : ans;
    }
};
