// problem url: https://www.codingninjas.com/codestudio/problems/841416?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0
// mode: Medium
// Height of the Binary Tree From Inorder and Level Order Traversal ( 2 Soln. )

//################################################################ (Warning: TLE) Recursive Soln. (DFS) #########################################################################
#include <bits/stdc++.h>
int heightOfTree(int low, int high, unordered_map<int,int> &indexOfNode, vector<int> levelOrder, int height){
    if(low==high)
        return height;
    if(low>high)
        return height-1;
    int rootIndex = indexOfNode[levelOrder[0]];
    
    vector<int> levelOrderForLeftSubTree, levelOrderForRightSubTree;
    for(int num: levelOrder){
        if(indexOfNode[num]<rootIndex)
            levelOrderForLeftSubTree.push_back(num);
        else if(indexOfNode[num]>rootIndex)
            levelOrderForRightSubTree.push_back(num);
    }
    
    int heightOfLeftSubTree = low==rootIndex ? height : heightOfTree(low, rootIndex-1, indexOfNode, levelOrderForLeftSubTree, height+1);
    int heightOfRightSubTree = rootIndex==high ? height : heightOfTree(rootIndex+1, high, indexOfNode, levelOrderForRightSubTree, height+1);
    
    return max(heightOfLeftSubTree, heightOfRightSubTree);
}
int heightOfTheTree(vector<int>& inorder, vector<int>& levelOrder, int N){
    unordered_map<int,int> indexOfNode;
    for(int i=0; i<N; i++)
        indexOfNode[inorder[i]] = i;
    return heightOfTree(0, inorder.size()-1, indexOfNode, levelOrder, 0);
}

//########################################################################## Iterative Soln. (BFS) #########################################################################
#include <bits/stdc++.h>
int heightOfTheTree(vector<int>& inorder, vector<int>& levelOrder, int N){
    unordered_map<int,int> indexOfNode;
    for(int i=0; i<N; i++)
        indexOfNode[inorder[i]] = i;
    
    int maxHeight = 0;
    int currRootIndex = 0;
    queue<vector<int>> q;
    if(N)    q.push({0, N-1, 0});
    while(!q.empty() && currRootIndex<N){
        vector<int> node = q.front();
        int low = node[0], high = node[1], height = node[2];
        q.pop();
        if(low!=high){
            maxHeight = max(maxHeight, height+1);
            if(low == indexOfNode[levelOrder[currRootIndex]])
                q.push({low+1, high, height+1});
            else if(indexOfNode[levelOrder[currRootIndex]] == high)
                q.push({low, high-1, height+1});
            else{
                q.push({low, indexOfNode[levelOrder[currRootIndex]]-1, height+1});
                q.push({indexOfNode[levelOrder[currRootIndex]]+1, high, height+1});
            }
        }
        ++currRootIndex;
    }
    return maxHeight;
}
