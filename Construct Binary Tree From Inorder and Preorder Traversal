// problem url: https://www.codingninjas.com/codestudio/problems/920539?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0
// mode: Easy
// Construct Binary Tree From Inorder and Preorder Traversal ( Recursive and Iterative Soln. )

//################################################################## Recursive ##########################################################################################
#include <bits/stdc++.h>
TreeNode<int> *buildBinaryTree(int index, vector<int> &preorder, int ilb, int irb, unordered_map<int,int> &indexOfNode){
    TreeNode<int> *root = new TreeNode<int>(preorder[index]);
    int indexOfRoot = indexOfNode[preorder[index]];
    int nodesInLeftSubTree = indexOfRoot - ilb;
    int nodesInRightSubTree = irb - indexOfRoot;
    
    root->left = nodesInLeftSubTree ?
                      buildBinaryTree(index+1, preorder, ilb, indexOfRoot-1, indexOfNode) 
                    : nullptr;
    
    root->right = nodesInRightSubTree ?
                      buildBinaryTree(index+nodesInLeftSubTree+1, preorder, indexOfRoot+1, irb, indexOfNode)
                    : nullptr;
}
TreeNode<int> *buildBinaryTree(vector<int> &inorder, vector<int> &preorder){
    if(inorder.size()==0)    return nullptr;
    
    unordered_map<int,int> indexOfNode;
    for(int i=0; i<inorder.size(); i++)
        indexOfNode[inorder[i]] = i;
    
    return buildBinaryTree(0, preorder, 0, inorder.size()-1, indexOfNode);
}

//################################################################## Iterative ###########################################################################################
#include <bits/stdc++.h>

struct Node{
    TreeNode<int> *node;
    int indexInPreorder, ilb, irb;
};

TreeNode<int> *buildBinaryTree(vector<int> &inorder, vector<int> &preorder){
    int inorderSize = inorder.size();
    if(inorderSize==0)    return nullptr;
    unordered_map<int,int> indexOfNode;
    for(int i=0; i<inorderSize; i++)
        indexOfNode[inorder[i]] = i;
    
    TreeNode<int> *root = new TreeNode<int>(preorder[0]);
    queue<Node> q;
    q.push({root, 0, 0, inorderSize-1});
    while(!q.empty()){
        TreeNode<int> *node = q.front().node;
        int pIndex = q.front().indexInPreorder;
        int ilb = q.front().ilb;
        int irb = q.front().irb;
        q.pop();
        int iIndex = indexOfNode[node->data];
        int nodesInLeftSubTree = iIndex - ilb;
        int nodesInRightSubTree = irb - iIndex;
        
        if(nodesInLeftSubTree){
            node->left = new TreeNode<int>(preorder[pIndex+1]);
            q.push({node->left, pIndex+1, ilb, iIndex-1});
        }else{
            node->left = nullptr;
        }
        
        if(nodesInRightSubTree){
            node->right = new TreeNode<int>(preorder[pIndex+nodesInLeftSubTree+1]);
            q.push({node->right, pIndex+nodesInLeftSubTree+1, iIndex+1, irb});
        }else{
            node->right = nullptr;
        }
    }
    
    return root;
}
