// problem url: https://leetcode.com/problems/rotate-image/
// mode: Medium
// move the elements in clock-wise direction

class Solution {
    
    void swap(int& val, pair<int,int> coord, vector<vector<int>>& matrix){
        int temp = val;
        val = matrix[coord.first][coord.second];
        matrix[coord.first][coord.second] = temp;
    }
    
public:
    void rotate(vector<vector<int>>& matrix) {
        int matSize = matrix.size();
        int modIndex = matSize-1;
        int layer = 0;
        vector<pair<int,int>> coords;
        
        coords.push_back(make_pair(matSize-1,0));
        coords.push_back(make_pair(0,0));
        coords.push_back(make_pair(0,matSize-1));
        coords.push_back(make_pair(matSize-1,matSize-1));
        
        
        while(matSize>1){
            for(int i=0; i<matSize-1; i++){
                int temp = matrix[coords[0].first][coords[0].second];
                for(int j=1; j<=4; j++){
                    swap(temp, coords[j%4], matrix);
                    switch(j%4){
                        case 0: coords[0].first = (coords[0].first-1)<=layer ? modIndex : (coords[0].first-1); break;
                        case 1: coords[1].second = (coords[1].second+1)>=modIndex ? layer : (coords[1].second+1); break;
                        case 2: coords[2].first = (coords[2].first+1)>=modIndex ? layer : (coords[2].first+1); break;
                        case 3: coords[3].second = (coords[3].second-1)<=layer ? modIndex : (coords[3].second-1); break;
                    }
                }
            }
            
            --coords[0].first; ++coords[0].second;
            ++coords[1].first; ++coords[1].second;
            ++coords[2].first; --coords[2].second;
            --coords[3].first; --coords[3].second;
            
            matSize -= 2;
            ++layer;
            --modIndex;
        }
    }
};
