// problem url: https://www.codingninjas.com/codestudio/problems/893049?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0
// mode: Medium
// Predecessor And Successor In BST

//################################################################## Recursive ##########################################################################################
void predecessorSuccessor(BinaryTreeNode<int>* root, int key, int &maxValLessThanRoot, int &minValGreaterThanRoot){
    if(root==nullptr)    return;
    if(root->data < key)    maxValLessThanRoot = max(maxValLessThanRoot, root->data);
    if(root->data > key)    minValGreaterThanRoot = min(minValGreaterThanRoot, root->data);
    predecessorSuccessor(root->left, key, maxValLessThanRoot, minValGreaterThanRoot);
    predecessorSuccessor(root->right, key, maxValLessThanRoot, minValGreaterThanRoot);
}
pair<int,int> predecessorSuccessor(BinaryTreeNode<int>* root, int key){
    int maxValLessThanRoot = -1, minValGreaterThanRoot = INT_MAX;
    predecessorSuccessor(root, key, maxValLessThanRoot, minValGreaterThanRoot);
    return {maxValLessThanRoot, minValGreaterThanRoot==INT_MAX ? -1 : minValGreaterThanRoot};
}

//################################################################## Iterative ###########################################################################################
#include <bits/stdc++.h>
pair<int,int> predecessorSuccessor(BinaryTreeNode<int>* root, int key){
    int maxValLessThanRoot = -1, minValGreaterThanRoot = INT_MAX;
    stack<BinaryTreeNode<int>*> st;
    if(root)    st.push(root);
    while(!st.empty()){
        BinaryTreeNode<int> *node = st.top();
        if(node->data < key)    maxValLessThanRoot = max(maxValLessThanRoot, node->data);
        if(node->data > key)    minValGreaterThanRoot = min(minValGreaterThanRoot, node->data);
        st.pop();
        if(node->right)    st.push(node->right);
        if(node->left)    st.push(node->left);
    }
    return {maxValLessThanRoot, minValGreaterThanRoot==INT_MAX ? -1 : minValGreaterThanRoot};
}
