// problem url: https://leetcode.com/problems/minimum-path-sum/
// mode: Medium
// Dynamic Programming - Minimum Path Sum

class Solution {
    int minPathSum(int row, int col, vector<vector<int>> &grid, vector<vector<int>> &dp){
        if(row==0 && col==0)
            return grid[0][0];
        
        if(row<0 || col<0)
            return INT_MAX;
        
        if(dp[row][col] != -1)
            return dp[row][col];
        
        return dp[row][col] = grid[row][col] + min(minPathSum(row-1, col, grid, dp), minPathSum(row, col-1, grid, dp));
    }
public:
    int minPathSum(vector<vector<int>>& grid) {
        vector<vector<int>> dp(grid.size(), vector<int>(grid[0].size(), -1));
        return minPathSum(grid.size()-1, grid[0].size()-1, grid, dp);
    }
};
