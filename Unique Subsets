// mode: Medium
// url: None
// Set and recurssion

#include <bits/stdc++.h>
using namespace std;

//--------------------------- Igonore This much it's just a c++ thing --------------------------------------------------------------
struct hashFunction {
  size_t operator()(const vector<int> &myVector) const {
    std::hash<int> hasher;
    size_t answer = 0;
    for (int i : myVector) {
      answer ^= hasher(i) + 0x9e3779b9 + (answer << 6) + (answer >> 2);
    }
    return answer;
  }
};
//---------------------------------------------------------------------------------------------------------------------------------

void subSets(int n, vector<int> &arr, int index, unordered_set<vector<int>, hashFunction> &vecSet){
    if(index==n)
        return;
    int vecSetSize = vecSet.size();

    for(int i=0; i<vecSetSize; i++){
        vector<int> subset = *next(vecSet.begin(),i); 
		subset.push_back(arr[index]);
		vecSet.insert(subset);
    }

    subSets(n, arr, index+1, vecSet);
}

vector<vector<int>> uniqueSubsets(int n, vector<int> &arr){
    unordered_set<vector<int>, hashFunction> vecSet;
    vecSet.insert(vector<int>());
    subSets(n, arr, 0, vecSet);
    vector<vector<int>> ans;
	int vecSetSize = vecSet.size();
	for(int i=0; i<vecSetSize; i++){
		vector<int> subset = *next(vecSet.begin(),i);
		ans.push_back(subset);
	}
    return ans;
}

int main() {
	vector<int> arr{5,5,3,5};
	vector<vector<int>> ans = uniqueSubsets(arr.size(),arr);
	for(auto temp: ans){
		cout<<"[ ";
		for(int num: temp)
			cout<<num<<' ';
		cout<<"]"<<endl;
	}
	return 0;
}
