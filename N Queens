// problem url: https://www.codingninjas.com/codestudio/problems/759332?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=1
// mode: Hard
// Recursion and backtracking

#include <bits/stdc++.h>

bool doesNotIntersectDiagonally(int row, int col, vector<int> &posWithQueen){
    int size = posWithQueen.size();
    for(int i=0; i<size; i++)
        if( (col==(posWithQueen[i]-(row-i))) || (col==(posWithQueen[i]+(row-i))) )
            return false;
    return true;
}

void findQueenPos(int n, int row, vector<int> &posWithQueen, unordered_map<int,bool> &queenPresentAtIndex, vector<vector<int>> &ans){
    if(n==row){
        vector<int> confg(n*n, 0);
        for(int i=0; i<n; i++){
            int validIndex = (i*n) + posWithQueen[i];
            confg[validIndex] = 1;
        }
        ans.push_back(confg);
        return;
    }
    
    for(int i=0; i<n; i++){
        if(!queenPresentAtIndex[i] && doesNotIntersectDiagonally(row,i,posWithQueen)){
            posWithQueen.push_back(i);
            queenPresentAtIndex[i] = true;
            findQueenPos(n, row+1, posWithQueen, queenPresentAtIndex, ans);
            posWithQueen.pop_back();
            queenPresentAtIndex[i] = false;
        }
    }
}

vector<vector<int>> solveNQueens(int n) {
    vector<int> posWithQueen;
    unordered_map<int,bool> queenPresentAtIndex;
    vector<vector<int>> ans;
    findQueenPos(n,0,posWithQueen,queenPresentAtIndex,ans);
    return ans;
}
